openapi: 3.0.2
servers:
  - description: API
    url: http://localhost/api
info:
  title: pockets
  version: 0.1.0
tags:
  - name: auth
    description: Auth namespace
  - name: users
    description: Users namespace
  - name: pockets
    description: Pockets namespace
  - name: transactions
  - name: categories
  - name: targets
    description: Targets namespace
  - name: targets
  - name: target_changes_balance
paths:
  /auth/register/:
    post:
      tags:
        - auth
      summary: Registration
      requestBody:
        $ref: '#/components/requestBodies/RegistrationRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Registration201'
        '400':
          $ref: '#/components/responses/Registration400'
  /auth/api-token-auth:
    post:
      tags:
        - auth
      summary: Obtain tokens pair
      requestBody:
        $ref: '#/components/requestBodies/TokenObtainRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenObtain200'
        '400':
          $ref: '#/components/responses/TokenObtain400'
  /auth/api-token-auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh access token
      requestBody:
        $ref: '#/components/requestBodies/TokenRefreshRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenRefresh200'
        '400':
          $ref: '#/components/responses/TokenRefresh400'
  /users/me:
    get:
      tags:
        - users
      summary: User info
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UsersMe200'
        '400':
          description: Unauthorized
  /pockets/transactions/:
    get:
      tags:
        - pockets
        - transactions
      summary: Transactions list
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Category'
        - $ref: '#/components/parameters/Year'
        - $ref: '#/components/parameters/Year__gt'
        - $ref: '#/components/parameters/Year__lt'
        - $ref: '#/components/parameters/Month'
        - $ref: '#/components/parameters/Month__gt'
        - $ref: '#/components/parameters/Month__lt'
        - in: query
          name: order_by
          schema:
            type: string
          description: Ordering by "category" name, "date" or "amount" of transactions
          required: false
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TransactionsList200'
        '401':
          description: Unauthorized
    post:
      tags:
        - pockets
        - transactions
      summary: Transaction Create
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: Unauthorized
  /pockets/transactions/{transaction_id}/:
    get:
      tags:
        - pockets
        - transactions
      summary: Transaction retrieve
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - pockets
        - transactions
      summary: Transaction update
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    patch:
      tags:
        - pockets
        - transactions
      summary: Transaction partial update
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    delete:
      tags:
        - pockets
        - transactions
      summary: Transaction delete
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /pockets/transactions/global/:
    get:
      tags:
        - pockets
        - transactions
      summary: Transactions global
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Category'
        - $ref: '#/components/parameters/Year'
        - $ref: '#/components/parameters/Year__gt'
        - $ref: '#/components/parameters/Year__lt'
        - $ref: '#/components/parameters/Month'
        - $ref: '#/components/parameters/Month__gt'
        - $ref: '#/components/parameters/Month__lt'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TransactionGlobal200'
        '401':
          description: Unauthorized
  /pockets/transactions/balance/:
    get:
      tags:
        - pockets
        - transactions
      summary: Transactions balance
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Category'
        - $ref: '#/components/parameters/Year'
        - $ref: '#/components/parameters/Year__gt'
        - $ref: '#/components/parameters/Year__lt'
        - $ref: '#/components/parameters/Month'
        - $ref: '#/components/parameters/Month__gt'
        - $ref: '#/components/parameters/Month__lt'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TransactionBalance200'
        '401':
          description: Unauthorized
  /pockets/categories/:
    get:
      tags:
        - pockets
        - categories
      summary: Categories list
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/CategoriesList200'
        '401':
          description: Unauthorized
      parameters:
        - in: query
          name: order_by
          schema:
            type: string
          description: Ordering by "transactions_expense_sum"
          required: false
    post:
      tags:
        - pockets
        - categories
      summary: Categoriy create
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CategoriesList200'
        '400':
          $ref: '#/components/responses/CategoryCreate400'
        '401':
          description: Unauthorized
  /pockets/categories/top_expense/:
    get:
      tags:
        - pockets
        - categories
      summary: Categories list with top expense transactions sum
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/CategoriesWithExpensesList200'
        '401':
          description: Unauthorized
  /targets/targets/:
    get:
      tags:
        - targets
        - targets
      summary: Targets list
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - in: query
          name: order_by
          schema:
            type: string
          required: false
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TargetsList200'
        '401':
          description: Unauthorized
    post:
      tags:
        - targets
        - targets
      summary: Target Create
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TargetCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Targets200'
        '400':
          $ref: '#/components/responses/TargetCreate400'
        '401':
          description: Unauthorized
  /targets/target_changes_balance/:
    get:
      tags:
        - targets
        - target_changes_balance
      summary: Changes of target balance list
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - in: query
          name: order_by
          schema:
            type: string
          required: false
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TargetChangesBalanceList200'
        '401':
          description: Unauthorized
    post:
      tags:
        - targets
        - targets
      summary: Target Create
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TargetChangeBalanceCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TargetChangesBalance200'
        '400':
          $ref: '#/components/responses/TargetChangeBalanceCreate400'
        '401':
          description: Unauthorized
components:
  parameters:
    Limit:
      name: limit
      in: query
      schema:
        type: number
      required: false
    Offset:
      in: query
      name: offset
      schema:
        type: number
      required: false
    Category:
      in: query
      name: category
      schema:
        type: number
      description: Filtering by category of transactions
      required: false
    Year:
      in: query
      name: year
      schema:
        type: number
      description: Filtering by year of transactions date (exact)
      required: false
    Year__lt:
      in: query
      name: year__lt
      schema:
        type: number
      description: Filtering by year of transactions date (lower than)
      required: false
    Year__gt:
      in: query
      name: year__gt
      schema:
        type: number
      description: Filtering by year of transactions date (greater than)
      required: false
    Month:
      in: query
      name: month
      schema:
        type: number
        minimum: 1
        maximum: 12
      description: Filtering by month of transactions date (exact)
      required: false
    Month__lt:
      in: query
      name: month__lt
      schema:
        type: number
        minimum: 1
        maximum: 12
      description: Filtering by month of transactions date (lower than)
      required: false
    Month__gt:
      in: query
      name: month__gt
      schema:
        type: number
        minimum: 1
        maximum: 12
      description: Filtering by month of transactions date (greater than)
      required: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Decimal:
      type: string
      example: '1000.00'
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
    CategoryBase:
      allOf:
        - type: object
          properties:
            id:
              type: number
    TargetCreate:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/CategoryBase'
        name:
          type: string
          format: string
        start_amount:
          $ref: '#/components/schemas/Decimal'
        end_amount:
          $ref: '#/components/schemas/Decimal'
        increase_percent:
          $ref: '#/components/schemas/Decimal'
        term:
          type: integer
          format: integer
    TargetBase:
      allOf:
        - type: object
          properties:
            id:
              type: number
    CategoryWithExpensesSums:
      allOf:
        - type: object
          properties:
            name:
              type: string
            transactions_expense_sum:
              $ref: '#/components/schemas/Decimal'
    TransactionRetrieve:
      type: object
      properties:
        id:
          type: number
        category:
          $ref: '#/components/schemas/CategoryBase'
        transaction_date:
          type: string
          format: date
        amount:
          $ref: '#/components/schemas/Decimal'
        transaction_type:
          enum:
            - income
            - expense
    TargetRetrieve:
      type: object
      properties:
        id:
          type: number
        category:
          $ref: '#/components/schemas/CategoryBase'
        name:
          type: string
          format: string
        start_amount:
          $ref: '#/components/schemas/Decimal'
        end_amount:
          $ref: '#/components/schemas/Decimal'
        increase_percent:
          $ref: '#/components/schemas/Decimal'
        term:
          type: integer
          format: integer
    TargetChangeBalanceRetrieve:
      type: object
      properties:
        id:
          type: number
        target:
          $ref: '#/components/schemas/TargetBase'
        amount:
          $ref: '#/components/schemas/Decimal'
        date:
          type: string

  requestBodies:
    RegistrationRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      required: true
    TokenObtainRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      required: true
    TokenRefreshRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
      required: true
    TransactionCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              category:
                $ref: '#/components/schemas/CategoryBase'
              transaction_date:
                type: string
                format: date
              amount:
                type: number
              transaction_type:
                type: string
                enum:
                  - income
                  - expense
                default: expense
      required: true
    CategoryCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryCreate'
    TargetCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TargetCreate'
      required: true
    TargetChangeBalanceCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              target:
                $ref: '#/components/schemas/TargetBase'
              amount:
                $ref: '#/components/schemas/Decimal'
              date:
                type: string
      required: true
  responses:
    Registration201:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
    Registration400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: array
                items:
                  type: string
                  example: Пользователь с таким именем уже существует.
              emain:
                type: array
                items:
                  type: string
                  example: Пользователь с таким Email уже существует.
    TokenObtain200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                type: string
                description: access token
              refresh:
                type: string
                description: refresh token
    TokenObtain400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: No active account found with the given credentials
    TokenRefresh200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: access token
    TokenRefresh400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Token is invalid or expired
              code:
                type: string
                example: token_not_valid
    UsersMe200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
    TransactionsList200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
              next:
                type: string
                format: uri
                nullable: true
              previous:
                type: string
                format: uri
                nullable: true
              result:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionRetrieve'
    Transactions200:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRetrieve'
    TransactionCreate400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: string
                  example: Убедитесь, что это значение больше либо равно 0.01.
              category:
                type: array
                items:
                  type: string
                  example:
                    - У пользователя нет такой категории
                    - У транзакций с типом 'Доход' не может быть категории
                    - У транзакций с типом 'Расход' должна быть категория
    TransactionGlobal200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              total_income:
                $ref: '#/components/schemas/Decimal'
              total_expenses:
                $ref: '#/components/schemas/Decimal'
    TransactionBalance200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              balance:
                $ref: '#/components/schemas/Decimal'
    CategoriesList200:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CategoryBase'
    Categories200:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryBase'
    CategoryCreate400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: array
                items:
                  type: string
                  example: >-
                    У пользоваетля уже существует категория с таким названием и
                    типом
              category_type:
                type: array
                items:
                  type: string
                  example: Значения нет среди допустимых вариантов.
    CategoriesWithExpensesList200:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CategoryWithExpensesSums'
    TargetsList200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
              next:
                type: string
                format: uri
                nullable: true
              previous:
                type: string
                format: uri
                nullable: true
              result:
                type: array
                items:
                  $ref: '#/components/schemas/TargetRetrieve'
    Targets200:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TargetRetrieve'
    TargetCreate400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              term:
                type: integer
                example: Убедитесь, что это значение от 1 до 12.
              increase_percent:
                type: number
                example: Убедитесь, что это значение больше либо равно 0.01.
              start_amount:
                type: number
                example: Убедитесь, что это значение больше либо равно 0.01.
              end_amount:
                type: number
                example: Убедитесь, что это значение больше либо равно 0.01.
              category:
                type: array
                items:
                  type: string
                  example:
                    - У пользователя нет такой категории
                    - У транзакций с типом 'Доход' не может быть категории
                    - У транзакций с типом 'Расход' должна быть категория
    TargetChangesBalanceList200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
              next:
                type: string
                format: uri
                nullable: true
              previous:
                type: string
                format: uri
                nullable: true
              result:
                type: array
                items:
                  $ref: '#/components/schemas/TargetChangeBalanceRetrieve'
    TargetChangesBalance200:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TargetChangeBalanceRetrieve'
    TargetChangeBalanceCreate400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: number
                example: Убедитесь, что это значение больше либо равно 0.01.
